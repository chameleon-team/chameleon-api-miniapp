<template>
  <page title="chameleon">
    <view class="page-container">
      <scroller height="{{-1}}">
        <view class="scroller-wrap">
          <view class="bwx-demo-page">
            <view class="bwx-demo-page-header">
              <text class="bwx-demo-page-title">Chameleon</text>
              <text class="bwx-demo-page-desc">Chameleon 跨各小程序接口能力展示</text>
            </view>
            <view class="bwx-demo-page-main">
              <view class="bwx-demo-page-main-list">
                <view
                  c-for="{{lists}}"
                  c-for-index="index"
                  c-for-item="item"
                >
                  <view class="bwx-demo-page-main-list-item">
                    <view
                      class="bwx-demo-page-main-list-item-panel"
                      c-bind:tap="itemClick(index)"
                    >
                      <text class="{{item.subOpen ? 'bwx-demo-page-main-list-item-panel-text  color-grey' : 'bwx-demo-page-main-list-item-panel-text'}}">{{item.name}}</text>
                    </view>
                    <view
                      class="bwx-demo-page-main-list-item-panel-sub-list"
                      c-if="{{item.subList.length && item.subOpen}}"
                    >
                      <view
                        class="bwx-demo-page-main-list-item-panel-sub-list-item"
                        c-for="{{ item.subList }}"
                        c-for-index="subIndex"
                        c-for-item="subItem"
                        c-bind:tap="subItemClick(index, subIndex)"
                      >
                        <text class="bwx-demo-page-main-list-item-panel-sub-list-item-link-text">{{subItem.name}}</text>
                      </view>
                    </view>
                  </view>
                </view>
              </view>
            </view>
          </view>
        </view>
      </scroller>
    </view>
  </page>
</template>

<script>
import cmlMini from '../../api/index.js';
console.log(cmlMini);

const say = msg => {
  cmlMini.showToast({
    title: JSON.stringify(msg)
  });
}

class Index {
  data = {
    lists: [{
      name: '交互反馈',
      subOpen: false,
      subList: [{
        name: 'showToast',
        method: 'showToast',
        param: {
          title: '你好toast',
          icon: 'success',
          duration: 2000
        }
      }, {
        name: 'showLoading',
        method: 'showLoading',
        param: {
          title: ''
        }
      }, {
        name: 'hideLoading',
        method: 'hideLoading',
        param: {
          page: {}
        }
      }, {
        name: 'showModal',
        method: 'showModal',
        param: {
          title: '提醒',
          content: '你的假期余额不足',
          cancelText: '好的',
          confirmText: '充值',
          success(res) {
            say(res);
          }
        }
      }]
    }, {
      name: '蓝牙',
      subOpen: false,
      subList: [{
        name: 'readBLECharacteristicValue',
        method: 'readBLECharacteristicValue',
        param: {
          deviceId: '',
          serviceId: '',
          characteristicId: '',
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'onBLEConnectionStateChange',
        method: 'onBLEConnectionStateChange',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'onBLECharacteristicValueChange',
        method: 'onBLECharacteristicValueChange',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'notifyBLECharacteristicValueChange',
        method: 'notifyBLECharacteristicValueChange',
        param: {
          deviceId: '',
          serviceId: '',
          characteristicId: '',
          state: true,
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'getBLEDeviceServices',
        method: 'getBLEDeviceServices',
        param: {
          deviceId: '',
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'getBLEDeviceCharacteristics',
        method: 'onBLEConnectionStateChange',
        param: {
          deviceId: '',
          serviceId: '',
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'createBLEConnection',
        method: 'createBLEConnection',
        param: {
          deviceId: '',
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'closeBLEConnection',
        method: 'closeBLEConnection',
        param: {
          deviceId: '',
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'writeBLECharacteristicValue',
        method: 'writeBLECharacteristicValue',
        param: {
          deviceId: '',
          serviceId: '',
          characteristicId: '',
          value: {},
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'startBluetoothDevicesDiscovery',
        method: 'startBluetoothDevicesDiscovery',
        param: {
          services: [],
          allowDuplicatesKey: true,
          interval: 1000,
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'stopBluetoothDevicesDiscovery',
        method: 'stopBluetoothDevicesDiscovery',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'openBluetoothAdapter',
        method: 'openBluetoothAdapter',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'onBluetoothDeviceFound',
        method: 'onBluetoothDeviceFound',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'onBluetoothAdapterStateChange',
        method: 'onBluetoothAdapterStateChange',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'getConnectedBluetoothDevices',
        method: 'getConnectedBluetoothDevices',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'getBluetoothDevices',
        method: 'getBluetoothDevices',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'getBluetoothAdapterState',
        method: 'getBluetoothAdapterState',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }, {
        name: 'closeBluetoothAdapter',
        method: 'closeBluetoothAdapter',
        param: {
          success(res) {
            console.log(res);
          }
        }
      }]
    }, {
      name: '页面导航',
      subOpen: false,
      subList: [{
        name: 'navigateTo',
        method: 'navigateTo',
        param: {
          url: '/pages/nav/nav'
        }
      }, {
        name: 'redirectTo',
        method: 'redirectTo',
        param: {
          url: '/pages/nav/nav'
        }
      }, {
        name: 'reLaunch',
        method: 'reLaunch',
        param: {
          url: '/pages/nav/nav'
        }
      }]
    }, {
      name: '界面',
      subOpen: false,
      subList: [{
        name: 'setNavigationBarTitle',
        method: 'setNavigationBarTitle',
        param: {
          title: 'Chameleon Title'
        }
      }]
    }, {
      name: '地理位置',
      subOpen: false,
      subList: [{
        name: 'getLocation',
        method: 'getLocation',
        param: {
          success(res) {
            say(res);
          }
        }
      }]
    }, {
      name: '系统信息',
      subOpen: false,
      subList: [{
        name: 'getSystemInfo',
        method: 'getSystemInfo',
        param: {
          success(res) {
            say(res);
          }
        }
      }]
    }]
  }
  computed = {

  }
  watch = {

  }
  methods = {
    itemClick(index) {
      this.lists[index].subOpen = !this.lists[index].subOpen;
    },
    subItemClick(index, subIndex) {
      const item = this.lists[index]['subList'][subIndex];
      const method = item.method;
      var param = item.param || {};
      cmlMini[method](param);

      if (method == 'showLoading') {
        setTimeout(() => {
          cmlMini.hideLoading();
        }, 5000)
      }
    }
  }
  beforeCreate(res) {
  }
  created(res) {
  }
  beforeMount(res) {
  }
  mounted(res) {
    // 必须在这里的回调才能获取
    cmlMini.onBLECharacteristicValueChange(function (characteristic) {
      console.log('characteristic value comed:', characteristic)
    })

  }
  beforeDestroy(res) {
  }
  destroyed(res) {
  }

}

export default new Index();

</script>
<style scoped>
.bwx-demo-page {
  background-color: #f8f8f8;
}

.bwx-demo-page-header {
  padding: 80cpx;
}

.bwx-demo-page-title {
  color: #333333;
  font-size: 60cpx;
}

.bwx-demo-page-desc {
  margin-top: 5cpx;
  color: #888888;
  font-size: 28cpx;
}
.bwx-demo-page-main {
  flex: 1;
  padding: 0 30cpx 50cpx;
}
.bwx-demo-page-main-list {
}
.bwx-demo-page-main-list-item {
  background-color: #ffffff;
  border-radius: 4cpx;
  margin: 10cpx 0;
}
.bwx-demo-page-main-list-item-panel {
  padding: 40cpx;
  border-radius: 4cpx;
}
.bwx-demo-page-main-list-item-panel-text {
  font-size: 36cpx;
}
.bwx-demo-page-main-list-item-panel-sub-list {
  background-color: #ffffff;
  border-radius: 4cpx;
  padding: 0cpx 0 40cpx 0;
}
.bwx-demo-page-main-list-item-panel-sub-list-item {
  padding: 20cpx 40cpx;
}
.bwx-demo-page-main-list-item-panel-sub-list-item-link-text {
  font-size: 32cpx;
}
.color-grey {
  color: #808080;
}
</style>
<script cml-type="json">
{
  "base": {
    "usingComponents": {
      "demo-com": "/components/demo-com/demo-com"
    }
  },
  "wx": {
    "navigationBarTitleText": "index",
    "backgroundTextStyle": "dark",
    "backgroundColor": "#E2E2E2"
  }
}
</script>
